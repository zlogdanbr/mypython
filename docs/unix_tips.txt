#UNIX DICAS v.1.0
         

## 1 VI                                                                                                  


1.1 Basico 
1.2 Avançado 
1.3 Vim 


## 2 UNIX GENERAL COMMANDS     


2.1 Basico\s\s
    2.1.1 ls directories\s\s
    2.1.2 Command Cut
    2.1.3 Command find
    2.1.3 Command find
    2.1.4 Command paste
    2.1.5 Command tee
    2.1.6 Command Uniq
    2.1.7 Date command
    2.2 grep
    2.2.1 grep basics
    2.2.2 Regular Expressions
    2.2.3 Advanced Grep
    2.2.4 Using or patterns with grep
    2.2.5 Grep lines before after
2.3 Diff


## 3 BASICO ADMINISTRACAO


3.1 Disk Usage 
3.2 Processor load 
3.3 Tutorial rÃ¡pido de permissÃµes 
3.4 Changing groups
3.5 User space
3.6 List users and groups
3.7 Changing default shell
3.7 User admin
3.8 File system usage
3.9 Advanced Admin
    3.9.1 Devices
    3.9.2 Arquivos especiais
    3.9.3 Fluxo de dados
    3.9.4 AIX Discos
    3.9.5 Solaris drivers
    3.9.6 Solaris Arquivos especiais
    3.9.7 Fita
    3.9.9 Logs
    3.9.10 Usuarios e grupos
    3.9.11 passwd
    3.9.12 groups
    3.9.13 processos em background
    3.9.14 crontab attab
    3.9.15 Registro de logins
    3.9.16 Password aging
    3.9.17 Logins Red Hat
    3.9.18 System logs Red Hat
    3.9.19 Increasing FS size ( AIX )>
    3.9.20 yum >

3.10 Find Red Hat Version


## 4 SHELL PROGRAMMING


4.1 Iterating over all files in a directory
4.2 Check for directory exists
4.3 Command substitution
4.4 Number-based menus
4.5 sed tips
4.6 reading fields on a file


## 5 AIX specifics


5.1 AIX recipes
5.2 Shared memory AIX 
5.3 Stop/start ssh service
5.4 Find C runtime version/ compiler AIX
5.5 Important Files In AIX 
5.6 Install pkgs AIX
5.7 Verify installed pkgs
5.8 Truss
5.9 init
    5.9.1 arquivos rc AIX/Solaris
    5.9.2 inittab e comando init
    5.9.3 expanding a file system
5.10 What system logs and commands can I use to investigate an unexpected shut down?
5.11 CPU and Memory Utilization of Processes on AIX environment
5.12 rpm


## 6 SOLARIS specifics


6.1 Solaris Core dump Analysis>
6.2 Solaris find Kernel
6.3 Solaris hardware
6.4 Solaris debug using mdb


## 7 HPUX specifics


7.1 HPUX find hardware


## 8 NETWORKING


8.1 Linux and Unix scp command
8.2 Enable telnet
8.3 Check for ports available
8.4 sftp commands
8.5 ssh


## 9 AWK


9.1 Command line
9.2 In a Korn Shell script 
9.3 Receipts
9.3.1 Counting and Printing Matched Pattern


## 10 CSCOPE



## 11 DBX





## VI


## 1.1 Basico
--------------------------------------------------------

y4              copia 4 linhas
yG              copia até final
0               Move to the begining of the line
$               Move to the end of the line
G               ( end of file )
                You can jump back to beginning of file by typing any one of the following command
                1G OR gg
                You can jump to line number 700 (press ESC type 700G) 700G

                
## 1.2 Avançado
--------------------------------------------------------

```
Cursor Movement Commands:
(n)             indicates a number, and is optional
(n)h            left (n) space(s)
(n)j            down (n) space(s)
(n)k            up (n) space(s)
(n)l            right (n) space(s)
                (The arrow keys usually work also)
^F              forward one screen
^B              back one screen
^D              down half screen
^U              up half screen
                (^ indicates control key; case does not matter)
H               beginning of top line of screen
M               beginning of middle line of screen
L               beginning of last line of screen
G               beginning of last line of file
(n)G            move to beginning of line (n)
0               (zero) beginning of line
$               end of line
(n)w            forward (n) word(s)
(n)b            back (n) word(s)
e               end of word

Inserting Text:
i               insert text before the cursor
a               append text after the cursor (does not overwrite other text)
I               insert text at the beginning of the line
A               append text to the end of the line
r               replace the character under the cursor with the next character typed
R               Overwrite characters until the end of the line (or until escape is pressed to change command)
o               (alpha o) open new line after the current line to type text
O               (alpha O) open new line before the current line to type text

Deleting Text:
dd              deletes current line
(n)dd           deletes (n) line(s)
(n)dw           deletes (n) word(s)
D               deletes from cursor to end of line
x               deletes current character
(n)x            deletes (n) character(s)
X               deletes previous character

Change Commands:
(n)cc           changes (n) characters on line(s) until end of the line (or until escape is pressed)
cw              changes characters of word until end of the word (or until escape is pressed)
(n)cw           changes characters of the next (n) words
c$              changes text to the end of the line
ct(x)           changes text to the letter (x)
C               changes remaining text on the current line (until stopped by escape key)
~               changes the case of the current character
J               joins the current line and the next line
u               undo the last command just done on this line
.               repeats last change
s               substitutes text for current character
S               substitutes text for current line
:s              substitutes new word(s) for old
(n)yy           yanks (n) lines to buffer
y(n)w           yanks (n) words to buffer
p               puts yanked or deleted text after cursor
P               puts yanked or deleted text before cursor

File Manipulation:
:w (file)       writes changes to file (default is current file)
:wq             writes changes to current file and quits edit session
:w! (file)      overwrites file (default is current file)
:q              quits edit session w/no changes made
:q!             quits edit session and discards changes
:n              edits next file in argument list
:f (name)       changes name of current file to (name)
:r (file)       reads contents of file into current edit at the current cursor position (insert a file)
:!(command)     shell escape
:r!(command)    inserts result of shell command at cursor position
ZZ              write changes to current file and exit
```

## 1.3 Vim
--------------------------------------------------------

```
----------              --------------
Comando                 Descricao
----------              --------------
u                       desfaz
U                       recupera linha
.                       repete comando
:!                      executa shell
:r file                 abre arquivo
:g/ palavra             Busca Global
:g/pal1/s//pal2/g/      Replace Global
$                       fim da lina
0                       inicio da linha
nyy                     copia n linhas
p                       cola
ms                      cria bookmark s ## a nÃ£o funciona
's                      acessa s
:set list               mostra caracteres
:set nolist             desabilita
:set ff=unix            converte LE para UNIX
:retab                  remove tabs e converte para espaÃ§os
G                       Final do arquivo
gg                      Inicio do arquivo
:n                      Abre mais arquivos
:args                   Mostra arquivo atual
:set laststatus=2       Permanente
*                       navigate to word
dw                      delete workd back ward
d                       delete
dd                      delete line
d                       Delete
y                       Yank into register
g~                      Swap case
gu                      Make lowercase
gU                      Make uppercase
>                       Shift right
<                       Shift left
=                       Autoindent
:edit                   open file ( no edit)
:ls                     list files
<C-o>                   navigate open files ( no tabs )
<C-i>                   navigate open files ( no tabs )
:noh                    clear highlight
:delm! | delm A-Z0-9    delete all marks
J                       Join two lines

Tab and navigation
vim - p arquivos        Abre  arquivos com tab
:tabedit {file}         edit specified file in a new tab
:tabfind {file}         open a new tab with filename given, searching the 'path' to find it
:tabclose               close current tab
:tabclose {i}           close i-th tab
:tabonly                close all other tabs (show only the current tab)
gt                      go to next tab
gT                      go to previous tab
{i}gt                   go to tab in position i
:tabnew file.txt        create new file in a new tab
:Explore                File system tool
:tab ball               Puts all open files in tabs
Visual Mode
V                       seleciona
y                       copia
p                       cola
:set mouse-=a           sai do modo visual
:set mouse=a            tabs clicaveis
```
-----------------------------------
Vertical selection:
-----------------------------------
Enter visual MODE  ( C-V )
Select using keys   
Use > or < on Normal mode
You can use . to repeat them

-----------------------------------
Inserting Characters:
-----------------------------------
Enter visual MODE  ( C-V )
Select using keys   
Type I on normal mode
type de word


Normal Mode copy and paste
Enter normal mode, go to the start line
Type mk (Mark point with alphabet k or use any other alphabet)
Move down (page down or whatever) and move to the end line
y'k will yank/copy all the lines from start to end
d'k will cut/delete all the lines from start to end

Diff
vim -d file1 file2 ...

Searching/navigation

Execute grep directly from VIM
Then, :cnext or :cprev to navigate

:vimgrep   ##navega direto

ctags
:set tags=/home/e5030079/sdir/tags;tags=/Osrc/ baselines/pdir_AIX612_IST_SWITCH_761_SP18_PATCH01/tags
:set tags=/home/e5030079/sdir/tags;tags=/Osrc/baselines/pdir_AIX612_IST_SWITCH_761_SP18_PATCH01/tags ## set tag files
ctags -R        ##generate
navigate
<C-]> and g<C-]>
or:
:tag symbol
:tjump symbol

-- maps F2 to launch tags dialog in a new tab
map <F2> :tab split <CR>:exec("tag ".expand("<cword>"))<CR>

Auto Complete
"VIM supports tag name completion. Start typing the tag name (i.e. function name) and then hit
TAB key and name completion will be done automatically if there is a tag name."

:tag start-of-tag-name_TAB



## UNIX GENERAL COMMANDS



## 2.1 Basico
--------------------------------------------------------
### 2.1.1 ls directories

ls -d */ ( lista dirs )

2.1.2 Command Cut

- Command cut ( chars )
$ export S_='SCCS_DIR_file-xyz'
$ echo $S_
SCCS_DIR_file-xyz
$ D_=$(echo $S_ | cut -c 1-10)
$ echo $D_
SCCS_DIR_f
$

- Command cut ( separators )
$ t="um:dois:tres:quatro"
$ echo $t
um:dois:tres:quatro
$  d=$(echo $t | cut -d : -f 3 )
$ echo $d
tres
$


### 2.1.3 Command find

e5030079@rsc2aix61:[/home/e5030079/usr/shell]$ find . -type f -ls > dir.txt
e5030079@rsc2aix61:[/home/e5030079/usr/shell]$ cat -n dir.txt
1  333507    1 -rw-r--r--  1 e5030079  suporte        522 Nov 18 09:18 ./Makefile
2  299030    1 -rwxrwxrwx  1 e5030079  suporte        458 Nov 18 09:30 ./createproj.ksh
3  299027    4 -rwxrwxrwx  1 e5030079  suporte       3458 Nov 27 11:19 ./debug.ksh
4  344772    1 -rw-rw-r--  1 e5030079  suporte        244 Nov 27 13:13 ./dir.txt
5  327793    2 -rwxrwxrwx  1 e5030079  suporte       1427 Nov 25 13:35 ./func.ksh
6  325339    1 -rwxrwxrwx  1 e5030079  suporte        365 Nov 25 13:08 ./sdel.ksh
7  334661    1 -rw-rw-r--  1 e5030079  suporte        215 Nov 27 12:42 ./texto.txt
e5030079@rsc2aix61:[/home/e5030079/usr/shell]$

- FIND + exec
e5030079@rsc2aix61:[/home/e5030079/usr]$ find . -type f -name texto.txt -exec cat -n {} \;
1  Esse texto sera usado para um teste dos comandos que estou estudando
2  1
3  2
4  3
5  4
6  5
7  6
8  7
9  7
10
11  ABCDEFGHIJKLMNOPQRST
12
13  AAAA:BBBB:CCCC:DDDD:EEEE
14
15  opc info: Output --> log.information
16
17
18  XYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYAAAA
19
20
21

find . -type f -name *.* -exec grep -i longtype {} \;

find and CTAGS

find . -name '*.cxx' -o -name '*.h' -o -name '*.cpp' -exec  ctags -u {} \;
vgrind -x tags

/home/e5030079/sdir/tags
/Osrc/baselines/pdir_AIX612_IST_SWITCH_761_SP18_PATCH01/tags

/home/e5030079/sdir/tags
/Osrc/devbaselines/pdir_AIX710-770SP12/tags


### 2.1.4 Command paste

- Paste
e5030079@rsc2aix61:[/home/e5030079/usr]$ cat t1.txt
um
dois
tres
quatro
cinco
e5030079@rsc2aix61:[/home/e5030079/usr]$ cat t2.txt
one
two
three
four
five
e5030079@rsc2aix61:[/home/e5030079/usr]$ paste t1.txt t2.txt
um      one
dois    two
tres    three
quatro  four
cinco   five
e5030079@rsc2aix61:[/home/e5030079/usr]$

### 2.1.5 Command tee

- TEE
e5030079@rsc2aix61:[/home/e5030079/usr]$ cat t.txt | tee tee.txt
cat: 0652-050 Cannot open t.txt.
e5030079@rsc2aix61:[/home/e5030079/usr]$ cat t1.txt | tee tee.txt
um
dois
tres
quatro
cinco
e5030079@rsc2aix61:[/home/e5030079/usr]$ ls -lrt
total 32
drwxr-xr-x    8 e5030079 suporte         256 Nov 26 15:40 proj
drwxr-xr-x    2 e5030079 suporte        4096 Nov 27 13:13 shell
-rw-rw-r--    1 e5030079 suporte          26 Nov 27 14:36 t1.txt
-rw-rw-r--    1 e5030079 suporte          24 Nov 27 14:36 t2.txt
-rw-rw-r--    1 e5030079 suporte          26 Nov 27 14:42 tee.txt
e5030079@rsc2aix61:[/home/e5030079/usr]$


### 2.1.6 Command Uniq
- UNIQ

e5030079@rsc2aix61:[/home/e5030079/usr/shell]$ cat texto.txt
Esse texto sera usado para um teste dos comandos que estou estudando
1
2
3
4
5
6
7
7

ABCDEFGHIJKLMNOPQRST

AAAA:BBBB:CCCC:DDDD:EEEE

opc info: Output --> log.information


XYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYAAAA



e5030079@rsc2aix61:[/home/e5030079/usr/shell]$ cat texto.txt | uniq
Esse texto sera usado para um teste dos comandos que estou estudando
1
2
3
4
5
6
7

ABCDEFGHIJKLMNOPQRST

AAAA:BBBB:CCCC:DDDD:EEEE

opc info: Output --> log.information

XYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYAAAA

e5030079@rsc2aix61:[/home/e5030079/usr/shell]$

2.1.7 Date command

date mmddhhmmyy

date 0517105617


## 2.2 grep
====================================================================

### 2.2.1 grep basics

- Use grep to search words only

When you search for boo, grep will match fooboo, boo123, barfoo35 and more. You can force the grep
command to select only those lines containing matches that form whole words i.e. match only boo word:
$ grep -w "boo" file

- Use grep to search 2 different words

Use the egrep command as follows:
$ egrep -w 'word1|word2' /path/to/file

- Count line when words has been matched

The grep can report the number of times that the pattern has been matched
for each file using -c (count) option:

$ grep -c 'word' /path/to/file

- Print all line that do not contain a word
You can use -v option to print inverts the match; that is, it matches only those lines that
do not contain the given word. For example print all line that do not contain the word bar:
$ grep -v bar /path/to/file

grep 'hello\.gif' file
since grep 'hello.gif' file will match lines containing hello-gif , hello1gif , helloagif , etc


-n prints lines
-w Word exactly
-i ignore case
-x Patter eg. grep -x boo *

###  2.2.2 Regular Expressions

i)
[agd] - the character is one of those included within the square brackets.
[^agd] - the character is not one of those included within the square brackets
{n} - the preceding character matches exactly n times.
{n,m} - the preceding character matches at least n times and not more than m times.

- egrep '[aeiou]{2,}' mysampledata.txt
Robert pears 4
Lisa peaches 7
Anne mangoes 7
Greg pineapples 3

ii)
How about any line with a 2 on it which is not the end of the line.
In this example the multiplier + applies to the . which is any character.

egrep '2.+' mysampledata.txt

The number 2 as the last character on the line.
egrep '2$' mysampledata.txt

Maybe we wish to see orders for everyone who's name begins with A - K.
egrep '^[A-K]' mysampledata.txt


grep "\<ISO_MTI_ID\> \[8..\]" shcdump.debug ## . anything, or 8..


###  2.2.4 Using or patterns with grep

grep -e ^"e" -e ^"lc" /etc/passwd
grep -e ^"e" -e ^"lc" /etc/passwd | cut -f1,5 -d : | sort -k1,1


## 2.3 Diff
================================================================

https://unix.stackexchange.com/questions/231530/comparing-directories-using-diff
diff -r cs_lac_jncb_CRMisoformatter_util-0.1.4 cs_lac_jncb_CRMisoformatter_util-0.1.4_new | grep -v '^[<>0-9]' | grep -v ^"---"
diff -r cs_lac_jncb_rexncb_util-0.0.4_Freddy cs_lac_jncb_rexncb_util-0.0.4_FINAL | grep -v '^[<>0-9]' | grep -v ^"---" | sort

vim

vim -d file1 file2 ..

vim -d
   
   

## BASICO ADMINISTRACAO


## 3.1 Disk Usage 
--------------------------------------------------------

du -g       (AIX)
df -g       (AIX)
du -g -s    (AIX)


## 3.2  Processor load 
--------------------------------------------------------

uptime |cut -d ":" -f 4                         (AIX)
uptime |cut -d ":" -f 4 |cut -d"." -f1          (AIX)


## 3.3 Tutorial rÃ¡pido de permissÃµes
--------------------------------------------------------

CHMOD Chart
CHMOD is used to change permissions of a file.

PERMISSION      COMMAND
U   G   W
rwx rwx rwx     chmod 777 filename
rwx rwx r-x     chmod 775 filename
rwx r-x r-x     chmod 755 filename
rw- rw- r--     chmod 664 filename
rw- r-- r--     chmod 644 filename

U = User
G = Group
W = World

r = Readable
w = writable
x = executable
- = no permission

Here is another way of looking at it:
Permissions:
400     read by owner
040     read by group
004     read by anybody (other)
200     write by owne
020     write by group
002     write by anybody
100     execute by owner
010     execute by group
001     execute by anybody


## 3.4 Changing groups
--------------------------------------------------------

chown acriter:acriter acriter_dbdatm_srv-3.12.48
chown usuario:grupo arquivo
groupadd -g group-id group-name
usermod -G sales vivek


## 3.5 User Space
--------------------------------------------------------

-Check tamanho dos arquivos                              (AIX)
 -sk = diretorio + KB
- -rn = ordem reversa + ordenado por campos numericos
 -5  = captura os 5 primeiros registros
- tamanho das pastas desde a pasta atual em KB
$ du -sk ./* | sort -rn | head -5

- tamanho das pastas desde a pasta atual em MB              (AIX)
$ du -sm ./* | sort -rn | head -5

- tamanho das pastas desde a pasta atual em GB              (AIX)
$ du -sg ./* | sort -rn | head -5


## 3.6 List users and groups
--------------------------------------------------------

echo "NOME DA ESTACAO" $HOST
echo 
lsuser ALL>>$HOST.txt
cat /etc/security/group>>$HOST.txt
cat /etc/security/user>>$HOST.txt


## 3.7  changing default shell
--------------------------------------------------------

solaris             edit /etc/passwd
LINUX/HPUX/AIX      chsh -s /bin/bash
AIX                 smitty


## 3.7 User admin
--------------------------------------------------------

useradd -d /home/lc531301 -m -s /usr/bin/ksh -c "Jimenez, Ralph" lc531301
passwd -f lc531301

useradd -d /home/sw761bre -m -s /usr/bin/ksh -c "Bre switch" sw761bre
passwd sw761bre

useradd -d /home/srvbr -m -s /usr/bin/ksh -c "srvbr" srvbr
passwd srvbr

useradd -d /home/swt77pmp -m -s /usr/bin/ksh -g devlatam -G tools -c "swt77pmp" swt77pmp
useradd -d /home/fnpmp -m -s /usr/bin/ksh -g devlatam -G tools -c "fnpmp" fnpmp
useradd -d /home/tst -m -s /usr/bin/ksh -c "tst" tst
passwd jaca

lc556720:x:1027:1028:Marcos Brito:/home/lc556720:/bin/ksh
useradd -d /home/swb77pmp -m -s /usr/bin/ksh -g devlatam -G tools -c "swb77pmp" swb77pm

useradd -d /home/e1009017 -m -s /usr/bin/ksh -g devlatam -c "Sharwani, Babrak K" e1009017

devlatam

useradd -d /home/e5560881 -m -s /bin/ksh -g devlatam -c "Segura, Salvador" e5560881
useradd -d /home/e1094689 -m -s /usr/bin/ksh -g devlatam -c "Venkateswaran, Pradeep" e1094689

abc65xtzz

useradd -d /home/e5030079 -m -s /usr/bin/ksh -g switch -c "Daniel" e5030079
useradd -d /home/lc5548861 -m -s /usr/bin/ksh -g switch -c "Dario" lc5548861



useradd -d /home/lc30415 -m -s /bin/ksh -g devlatam -c "Paez, Cristian" lc30415


swn77pmp
swb77pmp
useradd -d /home/swn77pmp -m -s /usr/bin/ksh -g devlatam -G tools -c "swn77pmp" swn77pmp
useradd -d /home/swb77pmp -m -s /usr/bin/ksh -g devlatam -G tools -c "swb77pmp" swb77pmp

sudo
/bin/su - ctx40a,/bin/su - swa77lx,/bin/su - ctx41g,/bin/su - wag77lx,/bin/su - swg77lx,/bin/su - swa77rbc,/bin/su - swg77rbc,/bin/su - swa77ap,/bin/su - swg77ap,/bin/su - swtk77ap,/bin/su - ctx40b,/bin/su - ctx41b

useradd -d /home/swt77pmp -m -s /usr/bin/ksh -g devlatam -G tools -c "swt77pmp" swt77pmp

useradd -d /home/swb77pmp -m -s /usr/bin/ksh -g devlatam -G tools -c "swb77pmp" swb77pmp

cl23bre 10.99.168.242   CLEARING BACKEND
cg23bre 10.99.168.242   CLEARING GUI

lc5548861
useradd -d /home/lc5548861 -m -s /bin/bash lc5548861
useradd -d /home/cl23bre -m -s /usr/bin/ksh -g switch -c "CLEARING BACKEND" cl23bre
useradd -d /home/cg23bre -m -s /usr/bin/ksh -g switch -c "CLEARING GUI" cg23bre
useradd -d /home/swapcar -m -s /usr/bin/ksh -g devlatam -G staff -c "swapcar" swapcar
useradd -d /home/swgpcar -m -s /usr/bin/ksh -g devlatam -G staff -c "swgpcar" swgpcar
useradd -d /home/swabusa -m -s /usr/bin/ksh -g devlatam -G staff -c "swabusa" swabusa
useradd -d /home/swgbusa -m -s /usr/bin/ksh -g devlatam -G staff -c "swgbusa" swgbusa


useradd -d /home/e5021359 -m -s /usr/bin/ksh -g switch -G staff -c "Sergio" e5021359

useradd -d /home/e5021359 -m -s /usr/bin/ksh -g staff -c "Sergio" e5021359


## 3.8 File system usage
--------------------------------------------------------

df -k [FILESYSTEM] to find out existing filesystem usage and LV for that filesystem


## 3.9 Advanced Admin
--------------------------------------------------------

### 3.9.1 Devices

AIX e HPUX

/dev
Usar smitty ou sam
OBS: dentro do smitty apÃ³s executar um comando podemos com F6 obter qual comando o smitty
executou.

Solaris

devfsadm -v
/etc/path_to_inst ( caminhos para cada dispositivo)
/devices

root@fissp-sol2:/devices## ls -lrt
total 37

drwxr-xr-x   3 root     sys            3 Aug 26 02:42 ebus@c0
drwxr-xr-x   2 root     sys            2 Aug 26 02:42 fcoe
drwxr-xr-x   2 root     sys            2 Aug 26 02:42 iscsi
drwxr-xr-x   2 root     sys            2 Aug 26 02:42 options
drwxr-xr-x   2 root     sys            2 Aug 26 02:42 pci-performance-counters@400
drwxr-xr-x   2 root     sys            2 Aug 26 02:42 pci-performance-counters@500
drwxr-xr-x   2 root     sys          106 Aug 26 02:42 pseudo
drwxr-xr-x   2 root     sys            2 Aug 26 02:42 scsi_vhci
drwxr-xr-x   7 root     sys            7 Aug 26 02:42 virtual-devices@100


Current terminal
/dev/pts/0



### 3.9.2 Arquivos especiais


Bloco pode ser compartilhado ex file system bxxx-xxx-xxx
Caracter acesso unico ex fita cxxx-xxx-xxx

### 3.9.3 Fluxo de dados

Quando teclamos cat arquivo > lp0 o Unix verifica o parametro minor para saber onde estÃ¡ o device,
e major para saber qual driver.

### 3.9.4  AIX Discos

lspv

root@rsc2aix61:/dev:> lspv
hdisk2          00f8861b15cc5ba2                    rootvg          active
hdisk3          00f8861b669eb4e2                    rootvg          active
root@rsc2aix61:/dev:> lspv hdisk2
PHYSICAL VOLUME:    hdisk2                   VOLUME GROUP:     rootvg
PV IDENTIFIER:      00f8861b15cc5ba2 VG IDENTIFIER     00f8861b00004c000000014915cc5c0d
PV STATE:           active
STALE PARTITIONS:   0                        ALLOCATABLE:      yes
PP SIZE:            256 megabyte(s)          LOGICAL VOLUMES:  12
TOTAL PPs:          799 (204544 megabytes)   VG DESCRIPTORS:   2
FREE PPs:           0 (0 megabytes)          HOT SPARE:        no
USED PPs:           799 (204544 megabytes)   MAX REQUEST:      256 kilobytes
FREE DISTRIBUTION:  00..00..00..00..00
USED DISTRIBUTION:  160..160..159..160..160
MIRROR POOL:        None

### 3.9.5  Solaris drivers

ls -l /dev

pg /etc/name_to_major
Arquivo responsavel pelo mapeamento dos numeros major e seus drivers
man driver_em_questao


### 3.9.6 Solaris Arquivos especiais
/dev/dsk                caracter
/dev/rsdk               bloco

Aix - terminais
root@rsc2aix61:/dev:> ls | grep ttyp
ttyp0
ttyp1
ttyp2
ttyp3
ttyp4
ttyp5
ttyp6
ttyp7
ttyp8
ttyp9
ttypa
ttypb
ttypc
ttypd
ttype
ttypf
root@rsc2aix61:/dev:>

### 3.9.7 Fita

Aix e Hpux verificar usando smitty/sam


### 3.9.8 ConfiguraÃ§Ã£o sistema
AIX /Hpux               Smitty/sam
Solaris                 prtconf configuraÃ§Ãµes do sistema
Solaris                 sysdef informaÃ§Ãµes do sistema
Apostila admin sol      pÃ¡gina 39


### 3.9.9 Logs
AIX syslogd ( mensagens de diagnostico do sistema)
Solaris/HPUX ( dmesg)


### 3.9.10 UsuÃ¡rios e grupos

/etc/passwd  /etc/group ( aix, solaris e hpux)
/etc/shadow ( senhas Solaris)


ConfiguraÃ§Ãµes default para o usuÃ¡rio podem estar em /etc/default/login mas em geral
estÃ£o em /etc/profile


### 3.9.11 passwd

passwd -f user forÃ§a o usuÃ¡rio a trocar a senhas
Pode ser usado para definir politicas de senha.

### 3.9.12 groups

groups          Lista os grupos
id              retorna o id do usuÃ¡rio
logins USER     logins usuÃ¡rios

### 3.9.13 processos em background

daniel@solaris:~/curso$ ./scri1 &
[1] 1780
daniel@solaris:~/curso$ ./scri1 &
[2] 1782
daniel@solaris:~/curso$ ./scri1 &
[3] 1784
daniel@solaris:~/curso$ jobs
[1]   Executando              ./scri1 &
[2]-  Executando              ./scri1 &
[3]+  Executando              ./scri1 &
daniel@solaris:~/curso$ fg %1
./scri1
^Z
[1]+  Parado                  ./scri1
daniel@solaris:~/curso$ jobs
[1]+  Parado                  ./scri1
[2]   Executando              ./scri1 &
[3]-  Executando              ./scri1 &
daniel@solaris:~/curso$ bg %1
[1]+ ./scri1 &
daniel@solaris:~/curso$ jobs
[1]   Executando              ./scri1 &
[2]-  Executando              ./scri1 &
[3]+  Executando              ./scri1 &
daniel@solaris:~/curso$ kill %1 %2 %3
daniel@solaris:~/curso$ jobs
[1]   Terminated              ./scri1
[2]-  Terminated              ./scri1
[3]+  Terminated              ./scri1
daniel@solaris:~/curso$ jobs
daniel@solaris:~/curso$


### 3.9.14 crontab attab

crontabs
root@rsc2aix61:/var/spool/cron/crontabs:> ls -lrt


@rsc2aix61(/home/e5030079/curso)$ date
Wed Jun 28 11:00:42 BRT 2017
@rsc2aix61(/home/e5030079/curso)$ at 11:26
ls -l /home > /dev/pts/1
banner ola
Job e5030079.1498659960.a will be run at Wed Jun 28 11:26:00 BRT 2017.
@rsc2aix61(/home/e5030079/curso)$ at -l
e5030079.1498659960.a   Wed Jun 28 11:26:00 BRT 2017
@rsc2aix61(/home/e5030079/curso)$


@rsc2aix61(/home/e5030079/curso)$  at -r 1498659960.a
at: 0481-168 Only jobs belonging to user e5030079 may be deleted.
@rsc2aix61(/home/e5030079/curso)$ at -r e5030079.1498659960.a
The e5030079.1498659960.a at file is deleted.
@rsc2aix61(/home/e5030079/curso)$ at l
at: syntax error
@rsc2aix61(/home/e5030079/curso)$ at -l
@rsc2aix61(/home/e5030079/curso)$ date
Wed Jun 28 11:04:44 BRT 2017

crontab -l
crontab -e


### 3.9.15 Registro de logins

root@rsc2aix61:/:>  last | tr -s " " | cut -f1 -d " " | grep e5030079 | uniq
e5030079
root@rsc2aix61:/:> last | tr -s " " | cut -f1 -d " " | grep e5030079 | wc -c
    8595
root@rsc2aix61:/:> last | tr -s " " | cut -f1 -d " " | grep boot | wc -c


### 3.9.16 Password aging

- chage -I -1 -m 0 -M 99999 -E -1 username

### 3.9.17 Logins Red Hat

lastlog -b 1000
last
last -x shutdown reboot

### 3.9.18 System logs Red Hat
/var/log
/var/log/messages


### 3.9.19 Increasing FS size ( AIX )>

http://geekswing.com/geek/how-to-expand-a-filesystem-in-aix-df-lsvg-chfs/

df -k [FILESYSTEM] to find out existing filesystem usage and LV for that filesystem
lslv [LVNAME] to find out VG for that LV
lsvg [VGNAME] to find out how many PPs are free
chfs -a size=[size setting] [FILESYSTEM] to grow the filesystem

Examples

chfs -a size=3G /home
chfs -a size=3000M /home
chfs -a size=+1G /home
chfs -a size=+500M /home

If your chfs command above errors out with 0516-787 extendlv: Maximum allocation for logical volume LVNAME is NUMBER,
then you need to: chlv -x [num] [lvname]
df -k [FILESYSTEM] to see changes made



### 3.9.20 yum >

yum list installed
yum remove package_name


## 3.10 Find Red Hat Version

    cat /etc/redhat-release.

## SHELL PROGRAMMING


## 4.1 Iterating over all files in a directory
--------------------------------------------------------


for i in `ls ` ; do tar -xvf $i; done;
for i in `ls ` ; do echo $i; done;


## 4.2 Check for directory exists
--------------------------------------------------------

if [ -d "$DIRPATH" ]; then
## Add code logic here
fi
Check for directory does not exist

if [ ! -d "$DIRPATH" ]; then
## Add code logic here
fi

--------------------------------------------------------

Command substitution in the Korn shell or POSIX shell
The Korn Shell, or POSIX Shell, lets you perform command substitution. In command substitution,
the shell executes a specified command in a subshell environment and replaces that command with its output.

To execute command substitution in the Korn shell or POSIX shell, type the following:

$(command)
or, for the backquoted version, type the following:
`command`

## 4.4 Number-based menus
--------------------------------------------------------

You dont have to build your own "choose a number" function: ksh has one already! But note that it returns
the value of the line, not the number of the line.

select word in one two three exit; do
echo word is $word
echo reply is $REPLY
if [[ "$word" = "exit" ]] ; then
break;
fi
done

This will print out a mini-menu like the following:
1) one
2) two
3) three
4) exit
#?


## 4.5 sed tips
--------------------------------------------------------

sed -n '1234,5555p' someFile ( lines )

sed -n '5002000,5003290p' shcdump.debug > debug.txt


## 4.6 reading fields on a file
--------------------------------------------------------


e1052727:chacon, roger william
e1052728:huaman, freddy milton
e1058252:teruya, noriko
lc33575:luis gonzalez
e5030079:daniel gomes
lc36649:orlando guerra
lc53130:ralph jimenez


while read zf
   do
   id=$(echo "$zf" | cut -d":" -f1)
   name=$(echo "$zf" | cut -d":" -f2)
   echo $id
   echo $name
done<$1



## AIX SPECIFICS


## 5.1 AIX recipes
--------------------------------------------------------

http://www.tech-recipes.com/rx/569/some-common-aixunix-commands/


## 5.2 Shared memory AIX 
--------------------------------------------------------

svmon -P process_id

shows fine grain detail about memory and paging usage of a single process.

svmon -P 14352566 | egrep "Vsid|shared memory"

[/home/swa761i/pdir20141209/log/debug]$ svmon -P 14352566 | egrep "Vsid|shared memory"
Vsid      Esid Type Description              PSize  Inuse   Pin Pgsp Virtual
8c7dd9         3 work shared memory segment       sm      0     0    2       2

[/home/swa761i/pdir20141209/log/debug]$ ipcs -mS
IPC status from /dev/mem as of Thu Feb  5 13:56:17 CST 2015
T        ID     KEY        MODE       OWNER    GROUP
Shared Memory:

:
:
m  66060452 0xbcc1bf90 --rw--  swa761i  suporte
SID :
0x8c7dd9


PID( mb) 14352566
Shared memory identifier 66060452
SID 0x8c7dd9


svmon -S 0x8c7dd9 -l

[/home/swa761i/pdir20141209/log/debug]$ svmon -S 0x8c7dd9 -l

Vsid      Esid Type Description              PSize  Inuse   Pin Pgsp Virtual
8c7dd9         3 work shared memory segment        s      0     0    2       2
                                             m      0     0    0       0
           pid(s)=27983882, 14352566, 12714014

           
## 5.3 Stop/start ssh service
--------------------------------------------------------

stopsrc -s sshd;sleep 2;startsrc -s sshd
lssrc -g ssh ( mostra se estÃ¡ ativo )
## se estiver
truss startsrc -s sshd


## 5.4 Find C runtime version/ compiler AIX
--------------------------------------------------------

lslpp -l | grep "vac.C"; lslpp -l | grep "vacpp.cmp.core"; lslpp -l | grep "xlC.aix*"
uname -a;  oslevel -s;  xlC -qversion; lslpp -l | grep "vac.C"; lslpp -l | grep "vacpp.cmp.core"; lslpp -l | grep "xlC.aix*"


## 5.5 Important Files In AIX 
--------------------------------------------------------

Files:
/etc/security/environ
lists environment attributes for each user

/etc/security/lastlog
lists last login attributes for each user

/etc/security/limits
lists process resource limits for each user

/etc/security/user
lists extended user attributes for  each user

/usr/lib/security/mkuser.default
lists default attributes for new users

/usr/lib/security/mkuser.sys
script that sets up the user's environment

/etc/passwd
lists basic user attributes for each user

/etc/security/passwd
contains password information for each user

/etc/security/login.cfg
lists login security information for each user

/etc/utmp
contains users that are logged into the system, used by the "who" command

/var/adm/wtmp
contains connect time information for users

/etc/security/failedlogin
contains unsuccessful login attempts

/etc/motd
message of the day that is displayed when the user logs in.

/etc/environment
lists the default environment that new processes will use.

/etc/profile
environment settings for all  users

$HOME/.profile
environment settings for a specific user

/etc/group
lists attributes for each group

/etc/security/group
lists extended attributes for each group

Important /etc/security/user attributes to know about:

- account_locked
true or false

- expires
Expiration time for a user account.  MMDDHHMMYY,  a value of 0 indicates no expiration

- loginretires
Number of invalid login attempts before a users is not allowed to login.  A value of 0 indicates this attribute is disabled.

- maxage
Maximum number of weeks a password is valid, a value of 0 indicates unlimited

- minage
Minimum number of weeks between password changes.


## 5.6 Install pkgs AIX
--------------------------------------------------------

- verify
lslpp -al "mqm*"

- Instale o produto inteiro no local padrÃ£o:
installp -acgXYd. ALL
- Instale os conjuntos de arquivos selecionados no local padrÃ£o:
installp -acgXYd. list of file sets
- Instale o produto inteiro em um local nÃ£o padrÃ£o usando o sinalizador -R:
installp -R USIL_Directory -acgXYd. tudo
- Instale os conjuntos de arquivos selecionados em um local nÃ£o padrÃ£o usando o sinalizador -R:
installp -R USIL_Directory -acgXYd. list of file sets


## 5.7 Verify installed pkgs
--------------------------------------------------------

lslpp -al

## 5.8 Truss
truss -o OUTPUT_FILE -l -d -f -p <PID-of-main-tcpipmt-process>
truss -l -d -f -p

## 5.9 init
--------------------------------------------------------

### 5.9.1 arquivos rc AIX/Solaris


AIX
DiretÃ³rios rc contem scripts executados quando o OS entra no nÃ­vel  desejado
@rsc2aix61(/etc/rc.d)$ ls -lR
total 8
drwxr-xr-x    2 root     system          256 Oct 17 2014  init.d
-r-xr--r--    1 root     system         1610 Aug 22 2007  rc
drwxr-xr-x    2 root     system          256 Apr 15 2016  rc2.d
drwxr-xr-x    2 root     system          256 Feb 04 2013  rc3.d
drwxr-xr-x    2 root     system          256 Feb 04 2013  rc4.d
drwxr-xr-x    2 root     system          256 Feb 04 2013  rc5.d
drwxr-xr-x    2 root     system          256 Feb 04 2013  rc6.d
drwxr-xr-x    2 root     system          256 Feb 04 2013  rc7.d
drwxr-xr-x    2 root     system          256 Feb 04 2013  rc8.d
drwxr-xr-x    2 root     system          256 Feb 04 2013  rc9.d
./init.d:
total 8
-r-xr-xr-x    1 root     system          467 Oct 17 2014  ptsc_init

./rc2.d:
total 32
-r-xr-xr-x    1 root     system          325 Apr 15 2016  Ksshd
-r-x============================================================    1 root     system         2439 Oct 15 2014  Kwpars
-rwxr-xr-x    1 root     system          175 Oct 15 2014  S00ct_boot
lrwxrwxrwx    1 root     system           26 Oct 17 2014  S20ptsc_init -> /etc/rc.d/init.d/ptsc_init
-r-xr-xr-x    1 root     system          326 Apr 15 2016  Ssshd

./rc3.d:
total 0

./rc4.d:
total 0

./rc5.d:
total 0

./rc6.d:
total 0

./rc7.d:
total 0

./rc8.d:
total 0

./rc9.d:
total 0

HPUX
/etc $ ls | grep rc
bcheckrc
d.cshrc
d.exrc
lvmrc
pre_init_rc
rc.bootmsg
rc.config
rc.config.d
rc.log
rc.log.old


Solaris

rc0.d
rc1.d
rc2.d
rc3.d
rcm
rcS.d



###  5.9.2 inittab e comando init
init <modo> troca o estado e executa os arquivos dentro do rc respectivos
inittab contem a inicializaÃ§Ã£o dos processos do os

## 5.10 What system logs and commands can I use to investigate an unexpected shut down?>
--------------------------------------------------------

Below is a list of the most useful system logs and commands that can be used to investigate an unexpected shut down:

    AIX error log                           (read with the errpt command)
    /var/adm/wtmp account file              (read with the last command)
    /var/adm/pacct account files            (read with the lastcomm command)
    AIX console log                         (read with the alog -t console -o command)
    su log file                             (read with cat /var/adm/sulog)
    Shell history file                      (read with the fc command)
    /etc/shutdown.log file                  (read with cat /etc/shutdown.log)
    HMC log files                           (consult HMC documentation)
    AIX audit log

errpt -a | grep REBOOT_ID

           0
0=SOFT IPL 1=HALT 2=TIME REBOOT
           1
TIME TO REBOOT (FOR TIMED REBOOT ONLY)

The boot type is displayed in the Detail Data section.

    0=SOFT IPL:
    Soft/warm boot, meaning that a running system was shut down and rebooted.
    1=HALT:
    Cold boot, meaning that a halted system had been previously halted.
    2=TIME REBOOT:
    Timed boot, meaning that a halted system was booted automatically after a specified period of time.


## 5.11 CPU and Memory Utilization of Processes on AIX environment
--------------------------------------------------------

You may use the following commands for checking CPU/Memory utilization.

Displaying top CPU_consuming processes:
$ ps aux | head -1; ps aux | sort -rn +2 | head -10

Displaying top 10 memory-consuming processes:
$ ps aux | head -1; ps aux | sort -rn +3 | head

Displaying process in order of being penalized:
$ ps -eakl | head -1; ps -eakl | sort -rn +5

Displaying process in order of priority:
$ ps -eakl | sort -n +6 | head

Displaying process in order of nice value
$ ps -eakl | sort -n +7

Displaying the process in order of time
$ ps vx | head -1;ps vx | grep -v PID | sort -rn +3 | head -10

Displaying the process in order of real memory use
$ ps vx | head -1; ps vx | grep -v PID | sort -rn +6 | head -10

Displaying the process in order of I/O
$ ps vx | head -1; ps vx | grep -v PID | sort -rn +4 | head -10

Displaying WLM classes
$ ps -a -o pid, user, class, pcpu, pmem, args

Determinimg process ID of wait processes:
$ ps vg | head -1; ps vg | grep -w wait

Wait process bound to CPU
$ ps -mo THREAD -p <PID>

Cpu usage with priority levels
$ topas -P


## 5.12 rpm>
--------------------------------------------------------

Uninstall       : rpm -ev MySQL-client
List all        : rpm -qa
Install         : rpm -ivh pkg.rpm
List            : rpm -qRp MySQL-client-3.23.57-1.i386.rpm
Dependencies


## SOLARIS specifics


## 6.1 Solaris Core dump Analysis
--------------------------------------------------------

- pstack core-file
- pmap core-file
If the results of the pstack utility are almost empty, all of the lines in the output look as follows:

0002c3cc ???????? (1354ea0, f3400, 1354ea0, 868, 2fc, 1353ff8)
In this case, make sure to run pstack on the machine where the core file was generated.

You can also use the mdb command instead of the pstack command to know the stack of the core.
Run the mdb command as follows:

- mdb $path-to-executable $path-to-core
$C to show the core stack
$q to quit
The output of the mdb and the pstack commands provide helpful information about the process stack at the time of the crash.
The mdb $C command output provides the exact thread that caused the crash.

On Solaris 9, the first thread of the pstack output often contains the thread responsible for the crash.
On Solaris 10, use mdb to find the crashing thread or, if using the pstack command, analyze the stack by looking
for threads that do not contain lwp-park, poll, and pollsys.

When analyzing process stacks from cores, concentrate on the operations in the middle of the thread.
Processes at the bottom are too general and processes at the top are too specific. The commands in the
middle of the thread are specific to the Directory Server and can thus help you identify at which point
during processing the operation failed. In the above example, we see the plugin_call_exop_plugins process
call indicates a problem calling an external operation in the custom plug-in.

## 6.2 Solaris add user and find Kernel
--------------------------------------------------------

Solaris ( Creating a user Solaris, Kernel info -32/64 ) bits
- determinar o kernel
/bin/isainfo -kv
64-bit sparcv9 kernel modules

isainfo -b ## 32 or 64 bits

uname -r
/home/e5030079 $ uname -r
5.10

/etc/opt/csw/sudoers  SOLARIS 10 Sudoers

## 6.3 Solaris hardware
--------------------------------------------------------

psrinfo

## 6.4 Solaris debug using mdb
--------------------------------------------------------

pmap to get process address
mdb
then

<proc address>::context


## HPUX specifics


## 7.1 HPUX find hardware
--------------------------------------------------------

model
machinfo



## Networking


## 8.1 Linux and Unix scp command
--------------------------------------------------------


scp myfile.txt hope@example.computerhope.com:myfile.txt
Copies the file myfile.txt to the remote host example.computerhope.com, using the username hope to log in.

scp myusername@myremotehost.com:/home/hope/* .
Copies all files in the remote directory /home/hope on the remote host myremotehost.com into the local working directory.

scp -r jeff@myhost.com:/home/jeff/documents /home/jeff/downloads/documents
Copies all files in the remote directory /home/jeff/documents on the server myhost.com,
including all subdirectories and the files they contain,
into the local directory /home/jeff/downloads/documents.

scp -l 100 jeff@myhost.com:/home/jeff/archive.zip .
Transfer the remote file /home/jeff/archive.zip on the remote host myhost.com as the user
jeff into the local working directory,
and limit the transfer to 100 kilobytes per second.

scp jeff@firsthost.com:/files/file1.zip brad@secondhost.com:/archives
Copies the file in the remote directory /files/file1.zip on the remote host firsthost.com into the
remote directory /archives on the remote host secondhost.com. You will be prompted
to enter the passwords for the
remote accounts jeff@firsthost.com and brad@secondhost.com, respectively. The transfer
will go directly from one remote host to the other.

scp -3 jeff@firsthost.com:/files/file1.zip brad@secondhost.com:/archives
Same as the above command, but rather than directly transferring the file from one remote host to the other,
the transfer is routed through the local host.
Related commands

rcp â Copy files to or from a remote system.
sftp â Conduct an interactive FTP session over a secure network connection.
slogin â Login to a remote system securely.


## 8.2 Enable telnet
--------------------------------------------------------
you have to edit the

/etc/inetd.conf

file.

Just remove the ## in front of the line containing the telnet entry.

After that perforam a

refresh -s inetd

and if that does not work restart the subsystem using

stopsrc -s inetd
startsrc -s inetd

There's no need do reboot.


## 8.3 Check for ports available
--------------------------------------------------------

swa761j@rsc2aix61:/home/swa761j:> netstat -an | grep 9992
tcp4       0      0  *.9992                 *.*                    LISTEN


## 8.4 sftp commands
--------------------------------------------------------

Connect
sftp tecmint@27.48.137.6

Check Present Working Directory
sftp: lpwd
Local working directory: /
sftp: pwd
Remote working directory: /tecmint/

Listing Files
Listing files and directories in local as well as remote system.

On Remote
sftp: ls

On Local
sftp: lls

Upload File
Put single or multiple files in remote system.

sftp: put local.profile
Uploading local.profile to /tecmint/local.profile


Upload Mutiple Files
Putting multiple files on in remote system.

sftp: mput *.xls

Download Files
Getting single or multiple files in local system.

sftp: get SettlementReport_1-10th.xls
Fetching /tecmint/SettlementReport_1-10th.xls to SettlementReport_1-10th.xls
Get multiple files on a local system.

sftp: mget *.xls
Note: As we can see by default with get command download file in local system with same name.
We can download remote file with different
name specifying the name at the end. (This applies only while downloading single file).

Switching Directories
Switching from one directory to another directory in local and remote locations.

On Remote

sftp: cd test
sftp:
On Local

sftp: lcd Documents
Create Directories
Creating new directories on local and remote locations.

sftp: mkdir test
sftp: lmkdir Documents

Remove Directories
Remove directory or file in remote system.

sftp: rm Report.xls
sftp: rmdir sub1
Note: To remove/delete any directory from remote location, the directory must be empty.

Exit sFTP Shell
The !command drop us in local shell from where we can execute Linux commands.
Type exit command where we can see sftp: prompt return.

sftp: !
[root@sftp ~]# exit
Shell exited with status 1
sftp:
nclusion
The SFTP is a very useful tool for administrating servers and transferring files to and from (Local and Remote).
We hope this tuts will help you to understand the usage of SFTP in some extent.

## 8.5 ssh
--------------------------------------------------------

lssrc -s sshd
stopsrc -s sshd;startsrc -s sshd


## AWK


## 9.1 Tips
--------------------------------------------------------

awk -F':' '{ print $1 }' /etc/passwd
awk -F':' '{ print $1 }' /etc/passwd | sort
awk '/e5030079|tejeda/' /etc/passwd


- cat lacusers
e1052727:chacon, roger william
e1052728:huaman, freddy milton
e1058252:teruya, noriko
lc33575:luis gonzalez
e5030079:daniel gomes
lc36649:orlando guerra
lc53130:ralph jimenez


$ awk -F":" '{print $1 "----" $2}' users
e1052727----chacon, roger william
e1052728----huaman, freddy milton
e1058252----teruya, noriko
lc33575----luis gonzalez
e5030079----daniel gomes
lc36649----orlando guerra
lc53130----ralph jimenez

$ awk -F":" '/e5030079/{print $1 "----" $2}' users
e5030079----daniel gomes

$ awk -F":" '/e5030079|noriko/{print $1 "----" $2}' users
e1058252----teruya, noriko
e5030079----daniel gomes


$ cat t
awk -F":" '/e5030079|noriko/{print $1 "----" $2}'

$ ./t
e1058252----teruya, noriko
e5030079----daniel gomes
$ vi t
$ ./t users
e1058252----teruya, noriko
e5030079----daniel gomes

$ awk -F":" '/e1/{++cnt} END {print "Count = ", cnt}' users
Count =  3

$ awk 'END {print FILENAME}' users
users

$ awk -F":" 'BEGIN {print "FS = " FS}' users
FS = :

$ echo "Colour\nColor" | awk '/Colou?r/'
Colour
Color

$ awk 'BEGIN { print "Hello, World !!!" > "message.txt" }'
$ cat message.txt
Hello, World !!!

[/Osrc/devbaselineslatam]$ awk 'BEGIN { print "hello, world !!!" | "tr [a-z] [A-Z]" }'
HELLO, WORLD !!!

$ awk 'BEGIN { printf "Hello\nWorld\n" }'
Hello
World


$ awk 'BEGIN { printf "Percentags = %e\n", 80.66 }'
Percentags = 8.066000e+01
$

$ awk 'BEGIN { printf "Percentags = %e %s \n", 80.66, "jaca"}'
Percentags = 8.066000e+01 jaca
$


$ m="10"
$ outfile="foo.bar"
$ awk -v m="$m" -v outfile="$outfile" 'BEGIN{print m, outfile; exit}'
10 foo.bar
$


n=10
awk -v TMP="$n" '{print $TMP}' /tmp/test.file



## 9.3 Receipts
--------------------------------------------------------

### 9.3.1 Counting and Printing Matched Pattern

awk '/a/{++cnt} END {print "Count = ", cnt}' marks.txt


### 9.3.2 Standard AWK variables

awk 'BEGIN {print "Arguments =", ARGC}' One Two Three Four

On executing this code, you get the following result â

Output

Arguments = 5



## CScope



- this creates the file indexing symbols
find . -type f -print | grep -E '\.(c(pp)?|h|cxx)$' > cscope.files
find . -type f -print | egrep  '\.(c(pp)?|h)$' > cscope.files   ( Solaris)
cscope -i cscope.files


## DBX

AIX
dbx -a process-id                       // debug process
dbx -C core_file                        // debug core
dbx program_name core                   // core

Solaris
dbx - core
dbx - PID
  
stop in `liboshcsdk-2.25.315.so`ShcFinAuthResp.cxx`ShcFinAuthResp::enrich()

stop in `file_bin_lib`sourcefile.xxx`class::method()

(dbx) stop at filename: n


(dbx) stop in main                      // breakpoint
(dbx) stop at t.c:13                    // break point at like 13 of t.c
(dbx) status                            // list all breakpoints
(dbx) next                              // next breakpoint
(dbx) run                               // Execute
(dbx) where                             // Looking at the Call Stack
(dbx) print msg                         // Print value of variable msg
(dbx) examine ADDRESS					// Address is the memory address 

https://edoras.sdsu.edu/doc/dbx.html

Execution and Tracing

run       execute object file
cont      continue execution from where it stopped
trace     display tracing information at specified place
stop      stop execution at specified place
status    display active trace and stop requests
delete    delete specific trace or stop requests
catch     start trapping specified signals
ignore    stop trapping specified signals
step      execute the next source line, stepping into functions
next      execute the next source line, even if it's a function


Displaying Data

print     print the value of an expression
whatis    print the declaration of a given identifier or type
which     print outer block associated with identifier
whereis   print all symbols matching identifier
assign    set the value of a variable


Function and Procedure Handling

where     display active procedures and functions on stack
down      move down the stack towards stopping point
up        move up the stack towards main
call      call the named function or procedure
dump      display names and values of all local variables




## GDB


So if you are running your code by:

$ executablefile arg1 arg2 arg3 
Debug it on gdb by:

$ gdb executablefile  
(gdb) r arg1 arg2 arg3


- Starting/stopping
````
run ARGS — 				start the program with the arguments ARGS
run ARGS <input.txt — 	start the program with the arguments ARGS, reading input from the file input.txt
kill — 					terminate the current program
stepi — 				step forward by one instruction
nexti — 				step forward by one instruction, skipping any called function
continue — 				run until breakpoint
````

- Breakpoint related
````
b function — 			set a breakpoint at entry to a particular function
b *0x123456 — 			set a breakpoint at the instruction at address 0x123456
watch *(int*)0x123456 — set a “watchpoint” that will trigger whenever memory at 0x123456 is updated
watch *(int*)0x123456 == 42 — set a “watchpoint” that will trigger whenever the int at address 0x123456 equals 42 (assuming it currently is not 42)
rwatch *(int*)0x123456 — set a “watchpoint” that will trigger whnever the program reads memory at 0x123456
info breakpoints, info watchpoints — view all active breakpoints/watchpoints
delete ID — clear breakpoint/watchpoint with the specified ID

````
- Register examination
````
info registers — view all general purpose registers
info all-registers — view all registers, even floating point registers, segment registers, etc.

````
- Memory examination

````
x/100bx 0x12345678 — print out 100 bytes of memory starting at address 0x12345678, as a sequence of 1-byte hexadecimal numbers
x/2gx 0x12345678 — print out 16 bytes of memory starting at address 0x12345678, as a two eight-byte hexdecimal numbers
x/s 0x12345678 — print out memory starting at address 0x12345678 as a \0-terminated string
x/wd 0x12345678 — print out memory at address 0x12345678 as a single 4-byte decimal integer
x/hd 0x12345678 — print out memory at address 0x12345678 as a single 2-byte decimal integer
x/100bx $rsi — print out 100 bytes of memory starting at the address in %rsi 
				(you can similarly use $rsi in place of an address in the commands above)
print *((long*) 0x12345678) — output the value of address 0x12345678 as a long (awkward way)
can also use an arbitrary C expression
display *((long*) 0x12345678) — output the value of address 0x12345678 as a long every time the program stops
undisplay ID — unset a previous display command
info display lists active IDs
Disassembly related
disassemble function — disassemble a function by name
disassemble 0x10000,0x10050 — disassemble whatever’s in memory between addresses 0x10000 and 0x10050`
x/6i 0x10000 — disassemble 6 instructions starting at address 0x10000
set disassembly-flavor att, set disassembly-flavor intel — switch between AT&T and Intel syntax assembly
````

- Segfault related
p $_siginfo._sifields._sigfault.si_addr — (on Linux) Usually print out invalid memory access location after a segfault. Note that this may print out something bogus if a segfault did not occur. It also seems to sometimes print out 0x0 instead of the actual faulting address. A more tedious but more universal way to find out the faulting address is to examine the instruction that triggered the segfault with x/i $rip, and the register values it is using with info registers.

